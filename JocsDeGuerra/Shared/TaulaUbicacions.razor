@inject IMapLocationService locationService
<MudText Typo="Typo.h5">Localitzacions</MudText>
<MudGrid>
    <MudItem lg="12">Total punts per ubicacions.</MudItem>
    <MudItem lg="4">
        <MudCard Outlined="true">
            <MudCardHeader>
                <MudText Typo="Typo.h6">Producció</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.h2">
                    @TeamLocations.Sum(x => x.Location.ProductionPoints)
                </MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem lg="4">
        <MudCard Outlined="true">
            <MudCardHeader>
                <MudText Typo="Typo.h6">Recerca</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.h2">
                    @TeamLocations.Sum(x => x.Location.ResearchPoints)
                </MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem lg="4">
        <MudCard Outlined="true">
            <MudCardHeader>
                <MudText Typo="Typo.h6">Exploració</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.h2">
                    @TeamLocations.Sum(x => x.Location.ExplorationPoints)
                </MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>
<MudTable Items="@TeamLocations" Dense="true" CanCancelEdit="true" RowEditCommit="ItemEditSaved" @bind-SelectedItem="selectedLocation" 
          RowEditPreview="EditBackupItem" RowEditCancel="ResetEditItem">
    <ToolBarContent>
        <MudSpacer></MudSpacer>
        <MudButton OnClick="AddEmptyLocation" ButtonType="ButtonType.Button">Afegir</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<OwnedLocation,object>(x => x.Location.Name)">Nom</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<OwnedLocation,object>(x => x.Location.ProductionPoints)">Producció</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<OwnedLocation,object>(x => x.Location.ResearchPoints)">Investigació</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<OwnedLocation,object>(x => x.Location.ExplorationPoints)">Exploració</MudTableSortLabel></MudTh>
        <MudTh>Recursos Assignats</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nom">@context.Location.Name</MudTd>
        <MudTd DataLabel="Producció">@context.Location.ProductionPoints</MudTd>
        <MudTd DataLabel="Investigació">@context.Location.ResearchPoints</MudTd>
        <MudTd DataLabel="Exploració">@context.Location.ExplorationPoints</MudTd>
        <MudTd DataLabel="Recursos Assignats">@context.AssignedResources</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Delete(@context.Location.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" Class="ma-2" />
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Nom">
            <MudSelect T="String" Dense="true" @bind-Value="selectedLocationName">
                @foreach (var location in AvailableLocations)
                { 
                    <MudSelectItem Value="@location.Id.ToString()">@location.Name</MudSelectItem>
                }
            </MudSelect>
        </MudTd>
        <MudTd UserAttributes="@(new Dictionary<string,object>() {{"colspan","4"}} )" DataLabel="Recursos Assignats">
            <MudTextField @bind-Value="@AssignedResources"></MudTextField>
        </MudTd>
    </RowEditingTemplate>
</MudTable> 


@code {
    [Parameter]
    public List<OwnedLocation> TeamLocations { get; set; }
    private List<MapLocation> AvailableLocations { get; set; }
    private OwnedLocation selectedLocation = null;
    private OwnedLocation itemBeforeEdit = null;
    private string selectedLocationName;
    private string AssignedResources { get; set; }


    protected override async Task OnInitializedAsync()
    {
        AvailableLocations = await locationService.GetLocations();
    }

    private void ItemEditSaved(object element)
    {
        var location = AvailableLocations.Find(x => x.Id.ToString() == selectedLocationName);

        ((OwnedLocation)element).Location.Name = location.Name;
        ((OwnedLocation)element).Location.ProductionPoints = location.ProductionPoints;
        ((OwnedLocation)element).Location.ExplorationPoints = location.ExplorationPoints;
        ((OwnedLocation)element).Location.ResearchPoints = location.ResearchPoints;
        ((OwnedLocation)element).Location.Id = location.Id;
        ((OwnedLocation)element).AssignedResources = AssignedResources;
        StateHasChanged();
    }

    private void AddEmptyLocation()
    {
        TeamLocations.Add(new OwnedLocation());
    }

    private void EditBackupItem(object item)
    {
        itemBeforeEdit = (OwnedLocation)item;
    }

    private void Delete(Guid id)
    {
        TeamLocations.Remove(TeamLocations.Find(x => x.Location.Id == id));
    }

    private void ResetEditItem(object item)
    {
        ((OwnedLocation)item).Location.BattleArchetipes = itemBeforeEdit.Location.BattleArchetipes;
        ((OwnedLocation)item).Location.ExplorationPoints = itemBeforeEdit.Location.ExplorationPoints;
        ((OwnedLocation)item).Location.Id = itemBeforeEdit.Location.Id;
        ((OwnedLocation)item).Location.Name = itemBeforeEdit.Location.Name;
        ((OwnedLocation)item).Location.Owner = itemBeforeEdit.Location.Owner;
        ((OwnedLocation)item).Location.ProductionPoints = itemBeforeEdit.Location.ProductionPoints;
        ((OwnedLocation)item).Location.ResearchPoints = itemBeforeEdit.Location.ResearchPoints;
        ((OwnedLocation)item).AssignedResources = itemBeforeEdit.AssignedResources;

    }
}
