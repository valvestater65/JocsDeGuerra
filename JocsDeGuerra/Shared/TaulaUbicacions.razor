@inject IMapLocationService locationService
<MudText Typo="Typo.h5">Localitzacions</MudText>
<MudGrid>
    <MudItem lg="12">Total punts per ubicacions.</MudItem>
    <MudItem lg="4">
        <MudCard Outlined="true">
            <MudCardHeader>
                <MudText Typo="Typo.h6">Producció</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.h2">
                    @TeamLocations.Sum(x => x.ProductionPoints)
                </MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem lg="4">
        <MudCard Outlined="true">
            <MudCardHeader>
                <MudText Typo="Typo.h6">Recerca</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.h2">
                    @TeamLocations.Sum(x => x.ResearchPoints)
                </MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem lg="4">
        <MudCard Outlined="true">
            <MudCardHeader>
                <MudText Typo="Typo.h6">Exploració</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.h2">
                    @TeamLocations.Sum(x => x.ExplorationPoints)
                </MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>
<MudTable Items="@TeamLocations" Dense="true" CanCancelEdit="true" RowEditCommit="ItemEditSaved" @bind-SelectedItem="selectedLocation" 
          RowEditPreview="EditBackupItem" RowEditCancel="ResetEditItem">
    <ToolBarContent>
        <MudSpacer></MudSpacer>
        <MudButton OnClick="AddEmptyLocation" ButtonType="ButtonType.Button">Afegir</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<MapLocation,object>(x => x.Name)">Nom</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<MapLocation,object>(x => x.ProductionPoints)">Producció</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<MapLocation,object>(x => x.ResearchPoints)">Investigació</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<MapLocation,object>(x => x.ExplorationPoints)">Exploració</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nom">@context.Name</MudTd>
        <MudTd DataLabel="Producció">@context.ProductionPoints</MudTd>
        <MudTd DataLabel="Investigació">@context.ResearchPoints</MudTd>
        <MudTd DataLabel="Exploració">@context.ExplorationPoints</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Nom">
            <MudSelect T="String" Dense="true" @bind-Value="selectedLocationName">
                @foreach (var location in AvailableLocations)
                { 
                    <MudSelectItem Value="@location.Id.ToString()">@location.Name</MudSelectItem>
                }
            </MudSelect>
        </MudTd>
    </RowEditingTemplate>
</MudTable> 


@code {
    [Parameter]
    public List<MapLocation> TeamLocations { get; set; }
    private List<MapLocation> AvailableLocations { get; set; }
    private MapLocation selectedLocation = null;
    private MapLocation itemBeforeEdit = null;
    private string selectedLocationName;


    protected override async Task OnInitializedAsync()
    {
        AvailableLocations = locationService.GetAllLocations();
    }

    private void ItemEditSaved(object element)
    {
        var location = AvailableLocations.Find(x => x.Id.ToString() == selectedLocationName);

        ((MapLocation)element).Name = location.Name;
        ((MapLocation)element).ProductionPoints = location.ProductionPoints;
        ((MapLocation)element).ExplorationPoints = location.ExplorationPoints;
        ((MapLocation)element).ResearchPoints = location.ResearchPoints;
        ((MapLocation)element).Id = location.Id;
        StateHasChanged();
    }

    private void AddEmptyLocation()
    {
        TeamLocations.Add(new MapLocation());
    }

    private void EditBackupItem(object item)
    {
        itemBeforeEdit = (MapLocation)item;
    }

    private void Delete(Guid id)
    {
        TeamLocations.Remove(TeamLocations.Find(x => x.Id == id));
    }

    private void ResetEditItem(object item)
    {
        ((MapLocation)item).BattleArchetipes = itemBeforeEdit.BattleArchetipes;
        ((MapLocation)item).ExplorationPoints = itemBeforeEdit.ExplorationPoints;
        ((MapLocation)item).Id = itemBeforeEdit.Id;
        ((MapLocation)item).Name = itemBeforeEdit.Name;
        ((MapLocation)item).Owner = itemBeforeEdit.Owner;
        ((MapLocation)item).ProductionPoints = itemBeforeEdit.ProductionPoints;
        ((MapLocation)item).ResearchPoints = itemBeforeEdit.ResearchPoints;

    }
}
